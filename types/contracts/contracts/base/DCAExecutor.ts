/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDCADataStructures {
  export type FeeDistributionStruct = {
    amountToExecutor: BigNumberish;
    amountToComputing: BigNumberish;
    amountToAdmin: BigNumberish;
    feeAmount: BigNumberish;
    executionAddress: AddressLike;
    computingAddress: AddressLike;
    adminAddress: AddressLike;
  };

  export type FeeDistributionStructOutput = [
    amountToExecutor: bigint,
    amountToComputing: bigint,
    amountToAdmin: bigint,
    feeAmount: bigint,
    executionAddress: string,
    computingAddress: string,
    adminAddress: string
  ] & {
    amountToExecutor: bigint;
    amountToComputing: bigint;
    amountToAdmin: bigint;
    feeAmount: bigint;
    executionAddress: string;
    computingAddress: string;
    adminAddress: string;
  };

  export type TokenDataStruct = {
    tokenAddress: AddressLike;
    decimals: BigNumberish;
    ticker: string;
  };

  export type TokenDataStructOutput = [
    tokenAddress: string,
    decimals: bigint,
    ticker: string
  ] & { tokenAddress: string; decimals: bigint; ticker: string };

  export type ReinvestStruct = {
    reinvestData: BytesLike;
    active: boolean;
    investCode: BigNumberish;
    dcaAccountAddress: AddressLike;
  };

  export type ReinvestStructOutput = [
    reinvestData: string,
    active: boolean,
    investCode: bigint,
    dcaAccountAddress: string
  ] & {
    reinvestData: string;
    active: boolean;
    investCode: bigint;
    dcaAccountAddress: string;
  };

  export type StrategyStruct = {
    accountAddress: AddressLike;
    baseToken: IDCADataStructures.TokenDataStruct;
    targetToken: IDCADataStructures.TokenDataStruct;
    interval: BigNumberish;
    amount: BigNumberish;
    strategyId: BigNumberish;
    active: boolean;
    reinvest: IDCADataStructures.ReinvestStruct;
  };

  export type StrategyStructOutput = [
    accountAddress: string,
    baseToken: IDCADataStructures.TokenDataStructOutput,
    targetToken: IDCADataStructures.TokenDataStructOutput,
    interval: bigint,
    amount: bigint,
    strategyId: bigint,
    active: boolean,
    reinvest: IDCADataStructures.ReinvestStructOutput
  ] & {
    accountAddress: string;
    baseToken: IDCADataStructures.TokenDataStructOutput;
    targetToken: IDCADataStructures.TokenDataStructOutput;
    interval: bigint;
    amount: bigint;
    strategyId: bigint;
    active: boolean;
    reinvest: IDCADataStructures.ReinvestStructOutput;
  };
}

export interface DCAExecutorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DistributeFees"
      | "Execute"
      | "ForceUnsubscribe"
      | "Subscribe"
      | "Unsubscribe"
      | "addAdmin"
      | "changeExecutor"
      | "checkIfAdmin"
      | "getActiveExecutorAddress"
      | "getExecutorAddress"
      | "getFeeData"
      | "getIntervalTotalActiveStrategys"
      | "getSpecificStrategy"
      | "getTimeTillWindow"
      | "getTotalActiveStrategys"
      | "getTotalExecutions"
      | "isActive"
      | "isIntervalActive"
      | "owner"
      | "removeAdmin"
      | "removeExecutor"
      | "renounceOwnership"
      | "setActiveState"
      | "setFeeData"
      | "setIntervalActive"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContractActiveStateChange"
      | "ExecutedStrategy"
      | "ExecutorAddressChange"
      | "FeeDataChanged"
      | "FeesDistributed"
      | "OwnershipTransferred"
      | "StrategySubscription"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DistributeFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Execute",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ForceUnsubscribe",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "Subscribe",
    values: [IDCADataStructures.StrategyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "Unsubscribe",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeExecutor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveExecutorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIntervalTotalActiveStrategys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpecificStrategy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeTillWindow",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalActiveStrategys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalExecutions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isIntervalActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveState",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeData",
    values: [IDCADataStructures.FeeDistributionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setIntervalActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DistributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ForceUnsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "Unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIntervalTotalActiveStrategys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpecificStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeTillWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalActiveStrategys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalExecutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isIntervalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIntervalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ContractActiveStateChangeEvent {
  export type InputTuple = [active_: boolean];
  export type OutputTuple = [active_: boolean];
  export interface OutputObject {
    active_: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedStrategyEvent {
  export type InputTuple = [account_: AddressLike, strategyId_: BigNumberish];
  export type OutputTuple = [account_: string, strategyId_: bigint];
  export interface OutputObject {
    account_: string;
    strategyId_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorAddressChangeEvent {
  export type InputTuple = [newAddress_: AddressLike];
  export type OutputTuple = [newAddress_: string];
  export interface OutputObject {
    newAddress_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeDataChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesDistributedEvent {
  export type InputTuple = [token_: AddressLike, amount_: BigNumberish];
  export type OutputTuple = [token_: string, amount_: bigint];
  export interface OutputObject {
    token_: string;
    amount_: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategySubscriptionEvent {
  export type InputTuple = [
    DCAAccountAddress_: AddressLike,
    strategyId_: BigNumberish,
    strategyInterval_: BigNumberish,
    active_: boolean
  ];
  export type OutputTuple = [
    DCAAccountAddress_: string,
    strategyId_: bigint,
    strategyInterval_: bigint,
    active_: boolean
  ];
  export interface OutputObject {
    DCAAccountAddress_: string;
    strategyId_: bigint;
    strategyInterval_: bigint;
    active_: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DCAExecutor extends BaseContract {
  connect(runner?: ContractRunner | null): DCAExecutor;
  waitForDeployment(): Promise<this>;

  interface: DCAExecutorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DistributeFees: TypedContractMethod<
    [tokenAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  Execute: TypedContractMethod<
    [DCAAccount_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  ForceUnsubscribe: TypedContractMethod<
    [DCAAccount_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  Subscribe: TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [void],
    "nonpayable"
  >;

  Unsubscribe: TypedContractMethod<
    [DCAAccountAddress_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  addAdmin: TypedContractMethod<[newAdmin_: AddressLike], [void], "nonpayable">;

  changeExecutor: TypedContractMethod<
    [executorAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  checkIfAdmin: TypedContractMethod<
    [addressToCheck_: AddressLike],
    [boolean],
    "view"
  >;

  getActiveExecutorAddress: TypedContractMethod<[], [string], "view">;

  getExecutorAddress: TypedContractMethod<[], [string], "view">;

  getFeeData: TypedContractMethod<
    [],
    [IDCADataStructures.FeeDistributionStructOutput],
    "view"
  >;

  getIntervalTotalActiveStrategys: TypedContractMethod<
    [interval_: BigNumberish],
    [bigint],
    "view"
  >;

  getSpecificStrategy: TypedContractMethod<
    [dcaAccountAddress_: AddressLike, accountStrategyId_: BigNumberish],
    [IDCADataStructures.StrategyStructOutput],
    "view"
  >;

  getTimeTillWindow: TypedContractMethod<
    [account_: AddressLike, strategyId_: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        lastEx: bigint;
        secondsLeft: bigint;
        checkReturn: boolean;
      }
    ],
    "view"
  >;

  getTotalActiveStrategys: TypedContractMethod<[], [bigint], "view">;

  getTotalExecutions: TypedContractMethod<[], [bigint], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  isIntervalActive: TypedContractMethod<
    [interval_: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeAdmin: TypedContractMethod<
    [oldAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  removeExecutor: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setActiveState: TypedContractMethod<
    [newFlag_: boolean],
    [void],
    "nonpayable"
  >;

  setFeeData: TypedContractMethod<
    [fee_: IDCADataStructures.FeeDistributionStruct],
    [void],
    "nonpayable"
  >;

  setIntervalActive: TypedContractMethod<
    [interval_: BigNumberish, status_: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DistributeFees"
  ): TypedContractMethod<[tokenAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "Execute"
  ): TypedContractMethod<
    [DCAAccount_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ForceUnsubscribe"
  ): TypedContractMethod<
    [DCAAccount_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Subscribe"
  ): TypedContractMethod<
    [strategy_: IDCADataStructures.StrategyStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Unsubscribe"
  ): TypedContractMethod<
    [DCAAccountAddress_: AddressLike, strategyId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[newAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeExecutor"
  ): TypedContractMethod<[executorAddress_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkIfAdmin"
  ): TypedContractMethod<[addressToCheck_: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getActiveExecutorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExecutorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFeeData"
  ): TypedContractMethod<
    [],
    [IDCADataStructures.FeeDistributionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIntervalTotalActiveStrategys"
  ): TypedContractMethod<[interval_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSpecificStrategy"
  ): TypedContractMethod<
    [dcaAccountAddress_: AddressLike, accountStrategyId_: BigNumberish],
    [IDCADataStructures.StrategyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeTillWindow"
  ): TypedContractMethod<
    [account_: AddressLike, strategyId_: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        lastEx: bigint;
        secondsLeft: bigint;
        checkReturn: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalActiveStrategys"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalExecutions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isIntervalActive"
  ): TypedContractMethod<[interval_: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[oldAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeExecutor"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setActiveState"
  ): TypedContractMethod<[newFlag_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeData"
  ): TypedContractMethod<
    [fee_: IDCADataStructures.FeeDistributionStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIntervalActive"
  ): TypedContractMethod<
    [interval_: BigNumberish, status_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ContractActiveStateChange"
  ): TypedContractEvent<
    ContractActiveStateChangeEvent.InputTuple,
    ContractActiveStateChangeEvent.OutputTuple,
    ContractActiveStateChangeEvent.OutputObject
  >;
  getEvent(
    key: "ExecutedStrategy"
  ): TypedContractEvent<
    ExecutedStrategyEvent.InputTuple,
    ExecutedStrategyEvent.OutputTuple,
    ExecutedStrategyEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorAddressChange"
  ): TypedContractEvent<
    ExecutorAddressChangeEvent.InputTuple,
    ExecutorAddressChangeEvent.OutputTuple,
    ExecutorAddressChangeEvent.OutputObject
  >;
  getEvent(
    key: "FeeDataChanged"
  ): TypedContractEvent<
    FeeDataChangedEvent.InputTuple,
    FeeDataChangedEvent.OutputTuple,
    FeeDataChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeesDistributed"
  ): TypedContractEvent<
    FeesDistributedEvent.InputTuple,
    FeesDistributedEvent.OutputTuple,
    FeesDistributedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StrategySubscription"
  ): TypedContractEvent<
    StrategySubscriptionEvent.InputTuple,
    StrategySubscriptionEvent.OutputTuple,
    StrategySubscriptionEvent.OutputObject
  >;

  filters: {
    "ContractActiveStateChange(bool)": TypedContractEvent<
      ContractActiveStateChangeEvent.InputTuple,
      ContractActiveStateChangeEvent.OutputTuple,
      ContractActiveStateChangeEvent.OutputObject
    >;
    ContractActiveStateChange: TypedContractEvent<
      ContractActiveStateChangeEvent.InputTuple,
      ContractActiveStateChangeEvent.OutputTuple,
      ContractActiveStateChangeEvent.OutputObject
    >;

    "ExecutedStrategy(address,uint256)": TypedContractEvent<
      ExecutedStrategyEvent.InputTuple,
      ExecutedStrategyEvent.OutputTuple,
      ExecutedStrategyEvent.OutputObject
    >;
    ExecutedStrategy: TypedContractEvent<
      ExecutedStrategyEvent.InputTuple,
      ExecutedStrategyEvent.OutputTuple,
      ExecutedStrategyEvent.OutputObject
    >;

    "ExecutorAddressChange(address)": TypedContractEvent<
      ExecutorAddressChangeEvent.InputTuple,
      ExecutorAddressChangeEvent.OutputTuple,
      ExecutorAddressChangeEvent.OutputObject
    >;
    ExecutorAddressChange: TypedContractEvent<
      ExecutorAddressChangeEvent.InputTuple,
      ExecutorAddressChangeEvent.OutputTuple,
      ExecutorAddressChangeEvent.OutputObject
    >;

    "FeeDataChanged()": TypedContractEvent<
      FeeDataChangedEvent.InputTuple,
      FeeDataChangedEvent.OutputTuple,
      FeeDataChangedEvent.OutputObject
    >;
    FeeDataChanged: TypedContractEvent<
      FeeDataChangedEvent.InputTuple,
      FeeDataChangedEvent.OutputTuple,
      FeeDataChangedEvent.OutputObject
    >;

    "FeesDistributed(address,uint256)": TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;
    FeesDistributed: TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StrategySubscription(address,uint256,uint8,bool)": TypedContractEvent<
      StrategySubscriptionEvent.InputTuple,
      StrategySubscriptionEvent.OutputTuple,
      StrategySubscriptionEvent.OutputObject
    >;
    StrategySubscription: TypedContractEvent<
      StrategySubscriptionEvent.InputTuple,
      StrategySubscriptionEvent.OutputTuple,
      StrategySubscriptionEvent.OutputObject
    >;
  };
}
