/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDCAFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CreateAccount"
      | "getActiveExecutorAddress"
      | "getDCAAccountsOfUser"
      | "getFactoryActiveState"
      | "getTotalDeployedAccounts"
      | "updateExecutorAddress"
      | "updateReinvestLibraryAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountCreated"
      | "ExecutorChanged"
      | "ReinvestLibraryChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CreateAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveExecutorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDCAAccountsOfUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryActiveState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeployedAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutorAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinvestLibraryAddress",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "CreateAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDCAAccountsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryActiveState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeployedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinvestLibraryAddress",
    data: BytesLike
  ): Result;
}

export namespace AccountCreatedEvent {
  export type InputTuple = [owner: AddressLike, dcaAccount: AddressLike];
  export type OutputTuple = [owner: string, dcaAccount: string];
  export interface OutputObject {
    owner: string;
    dcaAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorChangedEvent {
  export type InputTuple = [newAddress: AddressLike];
  export type OutputTuple = [newAddress: string];
  export interface OutputObject {
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReinvestLibraryChangedEvent {
  export type InputTuple = [newLibraryAddress: AddressLike];
  export type OutputTuple = [newLibraryAddress: string];
  export interface OutputObject {
    newLibraryAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDCAFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IDCAFactory;
  waitForDeployment(): Promise<this>;

  interface: IDCAFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CreateAccount: TypedContractMethod<[], [void], "nonpayable">;

  getActiveExecutorAddress: TypedContractMethod<[], [string], "view">;

  getDCAAccountsOfUser: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getFactoryActiveState: TypedContractMethod<[], [boolean], "view">;

  getTotalDeployedAccounts: TypedContractMethod<[], [bigint], "view">;

  updateExecutorAddress: TypedContractMethod<
    [_newExecutorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateReinvestLibraryAddress: TypedContractMethod<
    [newAddress_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CreateAccount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveExecutorAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDCAAccountsOfUser"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryActiveState"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getTotalDeployedAccounts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateExecutorAddress"
  ): TypedContractMethod<
    [_newExecutorAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReinvestLibraryAddress"
  ): TypedContractMethod<[newAddress_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AccountCreated"
  ): TypedContractEvent<
    AccountCreatedEvent.InputTuple,
    AccountCreatedEvent.OutputTuple,
    AccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorChanged"
  ): TypedContractEvent<
    ExecutorChangedEvent.InputTuple,
    ExecutorChangedEvent.OutputTuple,
    ExecutorChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReinvestLibraryChanged"
  ): TypedContractEvent<
    ReinvestLibraryChangedEvent.InputTuple,
    ReinvestLibraryChangedEvent.OutputTuple,
    ReinvestLibraryChangedEvent.OutputObject
  >;

  filters: {
    "AccountCreated(address,address)": TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;
    AccountCreated: TypedContractEvent<
      AccountCreatedEvent.InputTuple,
      AccountCreatedEvent.OutputTuple,
      AccountCreatedEvent.OutputObject
    >;

    "ExecutorChanged(address)": TypedContractEvent<
      ExecutorChangedEvent.InputTuple,
      ExecutorChangedEvent.OutputTuple,
      ExecutorChangedEvent.OutputObject
    >;
    ExecutorChanged: TypedContractEvent<
      ExecutorChangedEvent.InputTuple,
      ExecutorChangedEvent.OutputTuple,
      ExecutorChangedEvent.OutputObject
    >;

    "ReinvestLibraryChanged(address)": TypedContractEvent<
      ReinvestLibraryChangedEvent.InputTuple,
      ReinvestLibraryChangedEvent.OutputTuple,
      ReinvestLibraryChangedEvent.OutputObject
    >;
    ReinvestLibraryChanged: TypedContractEvent<
      ReinvestLibraryChangedEvent.InputTuple,
      ReinvestLibraryChangedEvent.OutputTuple,
      ReinvestLibraryChangedEvent.OutputObject
    >;
  };
}
