/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDCADataStructures {
  export type ReinvestStruct = {
    reinvestData: BytesLike;
    active: boolean;
    investCode: BigNumberish;
    dcaAccountAddress: AddressLike;
  };

  export type ReinvestStructOutput = [
    reinvestData: string,
    active: boolean,
    investCode: bigint,
    dcaAccountAddress: string
  ] & {
    reinvestData: string;
    active: boolean;
    investCode: bigint;
    dcaAccountAddress: string;
  };
}

export interface IDCAReinvestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeReinvest"
      | "getActiveModuals"
      | "getLibraryVersion"
      | "isActive"
      | "unwindReinvest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeReinvest",
    values: [IDCADataStructures.ReinvestStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveModuals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraryVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unwindReinvest",
    values: [IDCADataStructures.ReinvestStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeReinvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveModuals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraryVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwindReinvest",
    data: BytesLike
  ): Result;
}

export interface IDCAReinvest extends BaseContract {
  connect(runner?: ContractRunner | null): IDCAReinvest;
  waitForDeployment(): Promise<this>;

  interface: IDCAReinvestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeReinvest: TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  getActiveModuals: TypedContractMethod<[], [bigint[]], "view">;

  getLibraryVersion: TypedContractMethod<[], [string], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  unwindReinvest: TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeReinvest"
  ): TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveModuals"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLibraryVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "unwindReinvest"
  ): TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  filters: {};
}
