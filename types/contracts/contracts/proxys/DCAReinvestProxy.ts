/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDCADataStructures {
  export type ReinvestStruct = {
    reinvestData: BytesLike;
    active: boolean;
    investCode: BigNumberish;
    dcaAccountAddress: AddressLike;
  };

  export type ReinvestStructOutput = [
    reinvestData: string,
    active: boolean,
    investCode: bigint,
    dcaAccountAddress: string
  ] & {
    reinvestData: string;
    active: boolean;
    investCode: bigint;
    dcaAccountAddress: string;
  };
}

export interface DCAReinvestProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACTIVE_REINVESTS"
      | "REINVEST_VERSION"
      | "executeReinvest"
      | "getActiveModuals"
      | "getLibraryVersion"
      | "initialize"
      | "isActive"
      | "migrateReinvest"
      | "owner"
      | "renounceOwnership"
      | "testCall"
      | "transferOwnership"
      | "unwindReinvest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred" | "TestCall"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACTIVE_REINVESTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REINVEST_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeReinvest",
    values: [IDCADataStructures.ReinvestStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveModuals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLibraryVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [boolean]): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateReinvest",
    values: [
      IDCADataStructures.ReinvestStruct,
      IDCADataStructures.ReinvestStruct,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "testCall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwindReinvest",
    values: [IDCADataStructures.ReinvestStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTIVE_REINVESTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REINVEST_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeReinvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveModuals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLibraryVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateReinvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindReinvest",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TestCallEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DCAReinvestProxy extends BaseContract {
  connect(runner?: ContractRunner | null): DCAReinvestProxy;
  waitForDeployment(): Promise<this>;

  interface: DCAReinvestProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACTIVE_REINVESTS: TypedContractMethod<[], [string], "view">;

  REINVEST_VERSION: TypedContractMethod<[], [string], "view">;

  executeReinvest: TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  getActiveModuals: TypedContractMethod<[], [bigint[]], "view">;

  getLibraryVersion: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[activate_: boolean], [void], "nonpayable">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  migrateReinvest: TypedContractMethod<
    [
      oldReinvestData_: IDCADataStructures.ReinvestStruct,
      newReinvestData_: IDCADataStructures.ReinvestStruct,
      withdrawFunds_: boolean
    ],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  testCall: TypedContractMethod<[], [[bigint, boolean]], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unwindReinvest: TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACTIVE_REINVESTS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REINVEST_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeReinvest"
  ): TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveModuals"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLibraryVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[activate_: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrateReinvest"
  ): TypedContractMethod<
    [
      oldReinvestData_: IDCADataStructures.ReinvestStruct,
      newReinvestData_: IDCADataStructures.ReinvestStruct,
      withdrawFunds_: boolean
    ],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCall"
  ): TypedContractMethod<[], [[bigint, boolean]], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unwindReinvest"
  ): TypedContractMethod<
    [reinvestData_: IDCADataStructures.ReinvestStruct, amount_: BigNumberish],
    [[bigint, boolean] & { amount: bigint; success: boolean }],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TestCall"
  ): TypedContractEvent<
    TestCallEvent.InputTuple,
    TestCallEvent.OutputTuple,
    TestCallEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TestCall()": TypedContractEvent<
      TestCallEvent.InputTuple,
      TestCallEvent.OutputTuple,
      TestCallEvent.OutputObject
    >;
    TestCall: TypedContractEvent<
      TestCallEvent.InputTuple,
      TestCallEvent.OutputTuple,
      TestCallEvent.OutputObject
    >;
  };
}
