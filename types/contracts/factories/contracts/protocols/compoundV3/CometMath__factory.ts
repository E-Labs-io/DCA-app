/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  CometMath,
  CometMathInterface,
} from "../../../../contracts/protocols/compoundV3/CometMath";

const _abi = [
  {
    inputs: [],
    name: "InvalidInt104",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInt256",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt104",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt128",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt64",
    type: "error",
  },
  {
    inputs: [],
    name: "NegativeNumber",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220742d153830bba8ca1bd4cba8efef24d86f2868c9ee59a7c6e53ee53595ec161b64736f6c63430008140033";

type CometMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CometMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CometMath__factory extends ContractFactory {
  constructor(...args: CometMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CometMath & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CometMath__factory {
    return super.connect(runner) as CometMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CometMathInterface {
    return new Interface(_abi) as CometMathInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CometMath {
    return new Contract(address, _abi, runner) as unknown as CometMath;
  }
}
