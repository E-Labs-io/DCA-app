/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  OnlyActive,
  OnlyActiveInterface,
} from "../../../../contracts/security/onlyActive.sol/OnlyActive";

const _abi = [
  {
    inputs: [],
    name: "ContractIsPaused",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bool",
        name: "active_",
        type: "bool",
      },
    ],
    name: "ContractActiveStateChange",
    type: "event",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class OnlyActive__factory {
  static readonly abi = _abi;
  static createInterface(): OnlyActiveInterface {
    return new Interface(_abi) as OnlyActiveInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OnlyActive {
    return new Contract(address, _abi, runner) as unknown as OnlyActive;
  }
}
