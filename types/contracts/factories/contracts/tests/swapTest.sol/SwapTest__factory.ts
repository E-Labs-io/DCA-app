/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  SwapTest,
  SwapTestInterface,
} from "../../../../contracts/tests/swapTest.sol/SwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "swapAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "SWAP_ROUTER",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapToEthInContract",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapTokensInContract",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "swapTokensToEthToTarget",
    outputs: [
      {
        internalType: "uint256",
        name: "amountReturned",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "baseTokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "swapTokensToTarget",
    outputs: [
      {
        internalType: "uint256",
        name: "amountReturned",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526000805462ffffff60a01b191661017760a31b17905534801561002657600080fd5b50604051610e29380380610e298339810160408190526100459161006a565b600080546001600160a01b0319166001600160a01b039290921691909117905561009a565b60006020828403121561007c57600080fd5b81516001600160a01b038116811461009357600080fd5b9392505050565b610d80806100a96000396000f3fe6080604052600436106100745760003560e01c8063a627c00e1161004e578063a627c00e1461016c578063c60058931461018c578063eacb981b146101de578063f14210a6146101fe576100ba565b80632d5b55b2146100f9578063310ec4a71461012c57806351fd62731461014c576100ba565b366100ba576100b86040518060400160405280601481526020017f5377617054657374203a205b726563656976655d0000000000000000000000008152503461021e565b005b6100b86040518060400160405280601581526020017f5377617054657374203a205b66616c6c6261636b5d00000000000000000000008152503461021e565b34801561010557600080fd5b50610119610114366004610b3e565b6102b3565b6040519081526020015b60405180910390f35b34801561013857600080fd5b506100b8610147366004610b80565b610310565b34801561015857600080fd5b50610119610167366004610bac565b61031f565b34801561017857600080fd5b50610119610187366004610b80565b6103d2565b34801561019857600080fd5b506000546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610123565b3480156101ea57600080fd5b506101196101f9366004610bff565b6103e9565b34801561020a57600080fd5b506100b8610219366004610c40565b6103fe565b6102af8282604051602401610234929190610cbd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc0000000000000000000000000000000000000000000000000000000017905261040a565b5050565b60006102c184600085610413565b60405190915073ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f19350505050158015610307573d6000803e3d6000fd5b505b9392505050565b61031a8282610792565b505050565b600061032c858585610413565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af11580156103a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c99190610cdf565b50949350505050565b60006103e083600084610413565b90505b92915050565b60006103f6848484610413565b949350505050565b610407816108c9565b50565b610407816109c7565b600073ffffffffffffffffffffffffffffffffffffffff831661066b576000546040805160e08101825273ffffffffffffffffffffffffffffffffffffffff878116825282517f4aa4a4fc00000000000000000000000000000000000000000000000000000000815292519316926304e45aaf926020808401928692634aa4a4fc9260048083019391928290030181865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190610d01565b73ffffffffffffffffffffffffffffffffffffffff1681526000805462ffffff7401000000000000000000000000000000000000000090910416602083015230604080840191909152606083018890526080830182905260a090920152517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526105da9190600401600060e08201905073ffffffffffffffffffffffffffffffffffffffff80845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a08401528060c08501511660c08401525092915050565b6020604051808303816000875af11580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190610d1e565b905061065d6040518060400160405280601081526020017f5769746864726177696e672057455448000000000000000000000000000000008152506109e8565b610666816108c9565b610309565b600080546040805160e08101825273ffffffffffffffffffffffffffffffffffffffff88811682528781166020830190815262ffffff74010000000000000000000000000000000000000000860481168486019081523060608601908152608086018b815260a087018a815260c088019a8b5297517f04e45aaf000000000000000000000000000000000000000000000000000000008152965186166004880152935185166024870152905190911660448501525182166064840152516084830152915160a48201529251811660c484015216906304e45aaf9060e4016020604051808303816000875af1158015610767573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078b9190610d1e565b9050610309565b600080546107b890849073ffffffffffffffffffffffffffffffffffffffff1684610a77565b9050806103e3576000546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018490529084169063095ea7b3906044016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c9190610cdf565b9050806103e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5377617020416c6c6f77616e636520536574204661696c656400000000000000604482015260640160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634aa4a4fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610d01565b73ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161099291815260200190565b600060405180830381600087803b1580156109ac57600080fd5b505af11580156109c0573d6000803e3d6000fd5b5050505050565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b610407816040516024016109fc9190610d37565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac0000000000000000000000000000000000000000000000000000000017905261040a565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b129190610d1e565b1015949350505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461040757600080fd5b600080600060608486031215610b5357600080fd5b8335610b5e81610b1c565b9250602084013591506040840135610b7581610b1c565b809150509250925092565b60008060408385031215610b9357600080fd5b8235610b9e81610b1c565b946020939093013593505050565b60008060008060808587031215610bc257600080fd5b8435610bcd81610b1c565b93506020850135610bdd81610b1c565b9250604085013591506060850135610bf481610b1c565b939692955090935050565b600080600060608486031215610c1457600080fd5b8335610c1f81610b1c565b92506020840135610c2f81610b1c565b929592945050506040919091013590565b600060208284031215610c5257600080fd5b5035919050565b6000815180845260005b81811015610c7f57602081850181015186830182015201610c63565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b604081526000610cd06040830185610c59565b90508260208301529392505050565b600060208284031215610cf157600080fd5b8151801515811461030957600080fd5b600060208284031215610d1357600080fd5b815161030981610b1c565b600060208284031215610d3057600080fd5b5051919050565b6020815260006103e06020830184610c5956fea2646970667358221220fd802b148c04ef5f8ce3a7a66ef1f261bcd408f9a70acea989833ea12126467864736f6c63430008140033";

type SwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapTest__factory extends ContractFactory {
  constructor(...args: SwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    swapAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(swapAddress, overrides || {});
  }
  override deploy(
    swapAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(swapAddress, overrides || {}) as Promise<
      SwapTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapTest__factory {
    return super.connect(runner) as SwapTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapTestInterface {
    return new Interface(_abi) as SwapTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapTest {
    return new Contract(address, _abi, runner) as unknown as SwapTest;
  }
}
